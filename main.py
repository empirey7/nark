import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü–∞–º—è—Ç—å –≥–æ—Ä–æ–¥–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É)
user_cities = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    buttons = [
        [KeyboardButton("üìç –õ–û–ö–ê–¶–ò–ò"), KeyboardButton("üéÅ –ë–û–ù–£–°–´")],
        [KeyboardButton("üìú –ü–†–ê–í–ò–õ–ê"), KeyboardButton("üí¨ –û–¢–ó–´–í–´")],
        [KeyboardButton("üÜò –ü–û–î–î–ï–†–ñ–ö–ê")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_city = user_cities.get(user_id, "–ö–∏–µ–≤")

    photo = InputFile("black.jpg")  # –ø—Ä–æ—Å—Ç–æ —á—ë—Ä–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º
    text = (
        f"–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: –£–∫—Ä–∞–∏–Ω–∞\n"
        f"–í–∞—à –≥–æ—Ä–æ–¥: {user_city}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å: https://t.me/kittynarkbot?start=r_1258"
    )

    await message.answer_photo(photo=photo, caption=text, reply_markup=main_menu())

# –õ–æ–∫–∞—Ü–∏–∏
@dp.message_handler(lambda msg: msg.text == "üìç –õ–û–ö–ê–¶–ò–ò")
async def locations(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö–∏–µ–≤", "–õ—å–≤–æ–≤", "–û–¥–µ—Å—Å–∞", "–•–∞—Ä—å–∫–æ–≤", "–ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=markup)

@dp.message_handler(lambda msg: msg.text in ["–ö–∏–µ–≤", "–õ—å–≤–æ–≤", "–û–¥–µ—Å—Å–∞", "–•–∞—Ä—å–∫–æ–≤"])
async def set_city(message: types.Message):
    user_cities[message.from_user.id] = message.text
    await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=main_menu())

@dp.message_handler(lambda msg: msg.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
@dp.message_handler(lambda msg: msg.text == "üéÅ –ë–û–ù–£–°–´")
async def bonuses(message: types.Message):
    await message.answer("üíé –ë–æ–Ω—É—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ!")

@dp.message_handler(lambda msg: msg.text == "üìú –ü–†–ê–í–ò–õ–ê")
async def rules(message: types.Message):
    await message.answer("üìú –ü—Ä–∞–≤–∏–ª–∞:\n1. –ù–µ –Ω–∞—Ä—É—à–∞–π.\n2. –£–≤–∞–∂–∞–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message_handler(lambda msg: msg.text == "üí¨ –û–¢–ó–´–í–´")
async def reviews(message: types.Message):
    await message.answer("üí¨ –û—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å: @your_feedback_channel")

@dp.message_handler(lambda msg: msg.text == "üÜò –ü–û–î–î–ï–†–ñ–ö–ê")
async def support(message: types.Message):
    await message.answer("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support_username")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
